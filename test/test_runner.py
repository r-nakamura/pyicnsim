#!/usr/bin/env python3

import graph_tools

from icnsim.runner import Runner
from icnsim.scheduler import Scheduler

class TestRunner():
    def test_init(self):
        B, C, lambda_, alpha = 10, 100, 0.1, 0.8
        runner = Runner(B=B, C=C, lambda_=lambda_, alpha=alpha)
        assert runner.B == B
        assert runner.C == C
        assert runner.lambda_ == lambda_
        assert runner.alpha == alpha

    def test__import_dot(self):
        runner = Runner()
        dot = '''
// Generated by graph-tools (version 1.0) at 2021/46/04/06/21 11:46:39
// directed, 3 vertices, 20 edges
digraph export_dot {
  node [color=gray90,style=filled];
  "1";
  "2";
  "3";
  "1" -- "2";
  "2" -- "3";
}
'''
        runner._import_dot(dot.split("\n"))
        assert runner.G.has_edge(1, 2) == True
        assert runner.G.has_edge(1, 3) == False
        assert runner.G.has_edge(2, 3) == True

    def test_add_nodes(self):
        runner = Runner()
        runner.G = self._create_graph()
        runner.add_nodes()

        assert runner.nodes[1].id_ == 1
        assert runner.nodes[2].id_ == 2
        assert runner.nodes[3].id_ == 3

    def test_node_by_id(self):
        runner = Runner()
        runner.G = self._create_graph()
        runner.add_nodes()

        assert runner.node_by_id(1) == runner.nodes[1]

    def test_preprocess_path(self):
        runner = Runner()
        runner.G = self._create_graph()
        runner.add_nodes()
        nodes = runner.nodes

        runner._preprocess_path()
        assert nodes[1].path_tbl[1] == [nodes[1]]
        assert nodes[1].path_tbl[2] == [nodes[1], nodes[2]]
        assert nodes[1].path_tbl[3] == [nodes[1], nodes[3]]

    def _create_graph(self):
        g = graph_tools.Graph(directed=True)
        g.add_edge(1, 2)
        g.add_edge(2, 1)
        g.add_edge(2, 3)
        g.add_edge(3, 2)
        g.add_edge(1, 3)
        g.add_edge(3, 1)
        return g
